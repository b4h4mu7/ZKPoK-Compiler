ipblock term_prover(in  tx   : ns(1024);
                    out rx   : ns(1024);
                    in sr    : ns(2);
                    out done : ns(1)) {
  iptype "transceiver";
}

dp modexp (in inx, iny : ns(1024);
           in modulus  : ns(1024);
           out output  : ns(1024)) {
  sig added : ns(1024);
  
  always {
    output = inx ** iny % modulus;
  }
}

dp modmul (in inx, iny : ns(1024);
           in modulus  : ns(1024);
           out output  : ns(1024)) {
  sig added : ns(1024);
           
  always {
    output = (inx * iny) % modulus;
  }
}

dp modadd (in inx, iny : ns(1024);
           in modulus  : ns(1024);
	   out output  : ns(1024)) {
  sig added : ns(1024);
           
  always {
    added = inx + iny;
    output = added >= modulus ? added - modulus : added;
  }
}

dp random (in modulus : ns(1024);
           out output : ns(1024)) {
  sig rand : ns(1024);
  
  always {
    rand = 4;
    output = rand >= modulus ? rand - modulus : rand;
  }
}

dp Round0(
  in r_r_1_i: ns(160); out r_r_1_o: ns(160);
  in r_s_1_i: ns(160); out r_s_1_o: ns(160)) {



  always {
    r_r_1_o=r_r_1_i;
    r_s_1_o=r_s_1_i;
  }
}

dp modexp0 : modexp
dp random0 : random

dp Round1(
  in r_r_1_i: ns(160); out r_r_1_o: ns(160);
  in r_s_1_i: ns(160); out r_s_1_o: ns(160);
  out _out0: ns(1024)) {

  sig s_r_1 : ns(160);
  sig s_t_1 : ns(1024);

  use random0(11, s_r_1);
  use modexp0(3, s_r_1, 23, s_t_1);

  always {
    r_s_1_o=r_s_1_i;
    r_r_1_o=s_r_1;
    _out0=s_t_1;
  }
}

dp modadd0 : modadd
dp modmul0 : modmul

dp Round2(
  in r_r_1_i: ns(160); out r_r_1_o: ns(160);
  in r_s_1_i: ns(160); out r_s_1_o: ns(160);
  in _c: ns(80);
  out _out0: ns(160)) {

  sig s_c : ns(80);
  sig s_r_1 : ns(160);
  sig s_s_1 : ns(160);
  sig s_s_11 : ns(160);

  use modmul0(4, s_c, 11, s_s_1);
  use modadd0(s_r_1, s_s_1, 11, s_s_11);

  always {
    r_r_1_o=r_r_1_i;
    s_r_1=r_r_1_i; 
    r_s_1_o=s_s_11;
    _out0=s_s_11;
    s_c=_c;
  }
}

dp prover {
  reg r_r_1 : ns(160);
  reg r_s_1 : ns(160);
  
  reg _t_1  : ns(1024);
  reg _s_1  : ns(160);
  reg _c    : ns(80);
  
  sig to_send      : ns(1024);
  sig received     : ns(1024);
  sig send_receive : ns(2);
  reg done         : ns(1);
  
  sig r_r_1_o_0, r_r_1_o_1, r_r_1_o_2 : ns(160);
  sig r_s_1_o_0, r_s_1_o_1, r_s_1_o_2 : ns(160);
  
  use term_prover(to_send, received, send_receive, done);
  
  use Round0(r_r_1, r_r_1_o_0, r_s_1, r_s_1_o_0);
  use Round1(r_r_1, r_r_1_o_1, r_s_1, r_s_1_o_1, _t_1);
  use Round2(r_r_1, r_r_1_o_2, r_s_1, r_s_1_o_2, _c, _s_1);

  sfg init {
    to_send = 0;
    send_receive = 0;
  }
  
  sfg round0_r {
    to_send = 0;
    send_receive = 0;
  }

  sfg round0 {
    to_send = 0;
    send_receive = 0;
  }

  sfg round1 {
    to_send = 0;
    send_receive = 0;
    r_r_1 = r_r_1_o_1;
    r_s_1 = r_s_1_o_1;
  }
  
  sfg round1_s_t_1 {
    to_send = _t_1;
    send_receive = 1;  
    $display($dec, "send _t_1 = ", _t_1);
  }
    
  sfg round2_r {
    to_send = 0;
    send_receive = 2;  
  }
  
  sfg round2_r_c {
    to_send = 0;
    send_receive = 0;
    _c = received;
    $display($dec, "received _c = ", _c);
  }
  
  sfg round2 {
    to_send = 0;
    send_receive = 0;  
    r_r_1 = r_r_1_o_2;
    r_s_1 = r_s_1_o_2;
  }
  
  sfg round2_s_s_1 {
    to_send = _s_1;
    send_receive = 1;    
    $display($dec, "send _s_1 = ", r_s_1);
  }
  
  sfg finish {
    to_send = 0;
    send_receive = 0;
    $finish;
  }
}

fsm prover_cnt(prover) {
  initial s0;
  state s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11;
  
  @s0 (init) -> s1;
  @s1 (round0_r) -> s2;
  @s2 (round0) -> s5;

  @s5 (round1) -> s6;
  @s6 (round1_s_t_1) -> s7;
  @s7 if(~done) then (round1_s_t_1) -> s7;
      else (round2_r) -> s8;
      
  @s8 if(~done) then (round2_r) -> s8;
      else (round2_r_c) -> s9;
  @s9 (round2) -> s10;
  @s10 (round2_s_s_1) -> s11;
  @s11 if(~done) then (round2_s_s_1) -> s11;
       else (finish) -> s11;
}

system P {
  prover;
}
