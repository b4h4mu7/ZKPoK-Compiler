/** \file
 *  This C header file was generated by $ANTLR version 3.2 Fedora release 15 (Rawhide) Tue Feb  8 02:02:23 UTC 2011
 *
 *     -  From the grammar source file : codegen.g
 *     -                            On : 2012-03-15 03:39:38
 *     -           for the tree parser : codegenTreeParser *
 * Editing it, at least manually, is not wise. 
 *
 * C language generator and runtime by Jim Idle, jimi|hereisanat|idle|dotgoeshere|ws.
 *
 *
 * The tree parser codegen has the callable functions (rules) shown below,
 * which will invoke the code for the associated rule in the source grammar
 * assuming that the input stream is pointing to a token/text stream that could begin
 * this rule.
 * 
 * For instance if you call the first (topmost) rule in a parser grammar, you will
 * get the results of a full parse, but calling a rule half way through the grammar will
 * allow you to pass part of a full token stream to the parser, such as for syntax checking
 * in editors and so on.
 *
 * The parser entry points are called indirectly (by function pointer to function) via
 * a parser context typedef pcodegen, which is returned from a call to codegenNew().
 *
 * The methods in pcodegen are  as follows:
 *
 *  - void      pcodegen->proof(pcodegen)
 *  - void      pcodegen->execution_order(pcodegen)
 *  - void      pcodegen->step(pcodegen)
 *  - void      pcodegen->common(pcodegen)
 *  - void      pcodegen->block(pcodegen)
 *  - void      pcodegen->param(pcodegen)
 *  - void      pcodegen->global(pcodegen)
 *  - void      pcodegen->function(pcodegen)
 *  - Value *      pcodegen->param_declaration(pcodegen)
 *  - Value *      pcodegen->global_declaration(pcodegen)
 *  - Arg *      pcodegen->argument_declaration(pcodegen)
 *  - NumberT *      pcodegen->type_declaration(pcodegen)
 *  - codegen_function_declaration_return      pcodegen->function_declaration(pcodegen)
 *  - void      pcodegen->body(pcodegen)
 *  - void      pcodegen->statement(pcodegen)
 *  - Value *      pcodegen->assignment(pcodegen)
 *  - codegen_function_call_return      pcodegen->function_call(pcodegen)
 *  - Value *      pcodegen->argument(pcodegen)
 *  - NumberT *      pcodegen->group(pcodegen)
 *  - NumberT *      pcodegen->alias(pcodegen)
 *  - NumberT *      pcodegen->interval(pcodegen)
 *  - codegen_expr_return      pcodegen->expr(pcodegen)
 *
 * The return type for any particular rule is of course determined by the source
 * grammar file.
 */
// [The "BSD licence"]
// Copyright (c) 2005-2009 Jim Idle, Temporal Wave LLC
// http://www.temporal-wave.com
// http://www.linkedin.com/in/jimidle
//
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
// 1. Redistributions of source code must retain the above copyright
//    notice, this list of conditions and the following disclaimer.
// 2. Redistributions in binary form must reproduce the above copyright
//    notice, this list of conditions and the following disclaimer in the
//    documentation and/or other materials provided with the distribution.
// 3. The name of the author may not be used to endorse or promote products
//    derived from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
// IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
// OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
// IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
// INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
// NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
// THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

#ifndef	_codegen_H
#define _codegen_H
/* =============================================================================
 * Standard antlr3 C runtime definitions
 */
#include    <antlr3.h>

/* End of standard antlr 3 runtime definitions
 * =============================================================================
 */

	#include "llvm/DerivedTypes.h"
	#include "llvm/ExecutionEngine/ExecutionEngine.h"
	#include "llvm/ExecutionEngine/JIT.h"
	#include "llvm/LLVMContext.h"
	#include "llvm/Linker.h"
	#include "llvm/Module.h"
	#include "llvm/PassManager.h"
	#include "llvm/Analysis/Verifier.h"
	#include "llvm/Analysis/Passes.h"
	#include "llvm/Target/TargetData.h"
	#include "llvm/Transforms/Scalar.h"
	#include "llvm/Support/IRBuilder.h"
	#include "llvm/Support/TargetSelect.h"
	#include <cstdio>
	#include <cstdlib>
	#include <vector>
	#include <map>
	#include "GroupType.h"
	using namespace std;
	using namespace llvm;
	
	struct Variable {
		bool variable;
		NumberT *type;
		Value *value;
	};
	
	struct Arg {
		const char *id;
		NumberT *type;
		Value *value;
		bool global_reference;
	};

 
#ifdef __cplusplus
extern "C" {
#endif

// Forward declare the context typedef so that we can use it before it is
// properly defined. Delegators and delegates (from import statements) are
// interdependent and their context structures contain pointers to each other
// C only allows such things to be declared if you pre-declare the typedef.
//
typedef struct codegen_Ctx_struct codegen, * pcodegen;



#ifdef	ANTLR3_WINDOWS
// Disable: Unreferenced parameter,							- Rules with parameters that are not used
//          constant conditional,							- ANTLR realizes that a prediction is always true (synpred usually)
//          initialized but unused variable					- tree rewrite variables declared but not needed
//          Unreferenced local variable						- lexer rule declares but does not always use _type
//          potentially unitialized variable used			- retval always returned from a rule 
//			unreferenced local function has been removed	- susually getTokenNames or freeScope, they can go without warnigns
//
// These are only really displayed at warning level /W4 but that is the code ideal I am aiming at
// and the codegen must generate some of these warnings by necessity, apart from 4100, which is
// usually generated when a parser rule is given a parameter that it does not use. Mostly though
// this is a matter of orthogonality hence I disable that one.
//
#pragma warning( disable : 4100 )
#pragma warning( disable : 4101 )
#pragma warning( disable : 4127 )
#pragma warning( disable : 4189 )
#pragma warning( disable : 4505 )
#pragma warning( disable : 4701 )
#endif

/* ========================
 * BACKTRACKING IS ENABLED
 * ========================
 */
typedef struct codegen_function_declaration_return_struct
{
    pANTLR3_BASE_TREE       start;
    pANTLR3_BASE_TREE       stop;   
    Function *func;
    vector<Arg *> outs;
    vector<Arg *> inps;
}
    codegen_function_declaration_return;

typedef struct codegen_function_call_return_struct
{
    pANTLR3_BASE_TREE       start;
    pANTLR3_BASE_TREE       stop;   
    Value *value;
    NumberT *type;
}
    codegen_function_call_return;

typedef struct codegen_expr_return_struct
{
    pANTLR3_BASE_TREE       start;
    pANTLR3_BASE_TREE       stop;   
    Value *value;
    NumberT *type;
}
    codegen_expr_return;



/** Context tracking structure for codegen
 */
struct codegen_Ctx_struct
{
    /** Built in ANTLR3 context tracker contains all the generic elements
     *  required for context tracking.
     */
    pANTLR3_TREE_PARSER	    pTreeParser;


     void (*proof)	(struct codegen_Ctx_struct * ctx, const char *part);
     void (*execution_order)	(struct codegen_Ctx_struct * ctx);
     void (*step)	(struct codegen_Ctx_struct * ctx);
     void (*common)	(struct codegen_Ctx_struct * ctx);
     void (*block)	(struct codegen_Ctx_struct * ctx, const char *part);
     void (*param)	(struct codegen_Ctx_struct * ctx);
     void (*global)	(struct codegen_Ctx_struct * ctx);
     void (*function)	(struct codegen_Ctx_struct * ctx);
     Value * (*param_declaration)	(struct codegen_Ctx_struct * ctx);
     Value * (*global_declaration)	(struct codegen_Ctx_struct * ctx);
     Arg * (*argument_declaration)	(struct codegen_Ctx_struct * ctx);
     NumberT * (*type_declaration)	(struct codegen_Ctx_struct * ctx);
     codegen_function_declaration_return (*function_declaration)	(struct codegen_Ctx_struct * ctx);
     void (*body)	(struct codegen_Ctx_struct * ctx);
     void (*statement)	(struct codegen_Ctx_struct * ctx);
     Value * (*assignment)	(struct codegen_Ctx_struct * ctx);
     codegen_function_call_return (*function_call)	(struct codegen_Ctx_struct * ctx);
     Value * (*argument)	(struct codegen_Ctx_struct * ctx);
     NumberT * (*group)	(struct codegen_Ctx_struct * ctx);
     NumberT * (*alias)	(struct codegen_Ctx_struct * ctx);
     NumberT * (*interval)	(struct codegen_Ctx_struct * ctx);
     codegen_expr_return (*expr)	(struct codegen_Ctx_struct * ctx, const char *id);
     ANTLR3_BOOLEAN (*synpred1_codegen)	(struct codegen_Ctx_struct * ctx);
    // Delegated rules
    const char * (*getGrammarFileName)();
    void	    (*free)   (struct codegen_Ctx_struct * ctx);
        
};

// Function protoypes for the constructor functions that external translation units
// such as delegators and delegates may wish to call.
//
ANTLR3_API pcodegen codegenNew         (pANTLR3_COMMON_TREE_NODE_STREAM instream);
ANTLR3_API pcodegen codegenNewSSD      (pANTLR3_COMMON_TREE_NODE_STREAM instream, pANTLR3_RECOGNIZER_SHARED_STATE state);

/** Symbolic definitions of all the tokens that the tree parser will work with.
 * \{
 *
 * Antlr will define EOF, but we can't use that as it it is too common in
 * in C header files and that would be confusing. There is no way to filter this out at the moment
 * so we just undef it here for now. That isn't the value we get back from C recognizers
 * anyway. We are looking for ANTLR3_TOKEN_EOF.
 */
#ifdef	EOF
#undef	EOF
#endif
#ifdef	Tokens
#undef	Tokens
#endif 
#define FUNCTION      13
#define T__29      29
#define T__28      28
#define T__27      27
#define T__26      26
#define T__25      25
#define ORDER      7
#define T__24      24
#define T__23      23
#define T__22      22
#define T__21      21
#define T__20      20
#define PARAM      5
#define ID      14
#define PROOF      6
#define EOF      -1
#define INTERVAL      4
#define T__19      19
#define BODY      11
#define COMMENT      16
#define T__42      42
#define T__43      43
#define T__40      40
#define T__41      41
#define T__46      46
#define T__47      47
#define T__44      44
#define T__45      45
#define T__48      48
#define T__49      49
#define NUMBER      15
#define INP      9
#define T__30      30
#define T__31      31
#define T__32      32
#define WS      18
#define T__33      33
#define T__34      34
#define NEWLINE      17
#define T__35      35
#define VARIABLE      12
#define T__36      36
#define T__37      37
#define T__38      38
#define T__39      39
#define BLOCK      8
#define OUTPUT      10
#ifdef	EOF
#undef	EOF
#define	EOF	ANTLR3_TOKEN_EOF
#endif

#ifndef TOKENSOURCE
#define TOKENSOURCE(lxr) lxr->pLexer->rec->state->tokSource
#endif

/* End of token definitions for codegen
 * =============================================================================
 */
/** \} */

#ifdef __cplusplus
}
#endif

#endif

/* END - Note:Keep extra line feed to satisfy UNIX systems */
